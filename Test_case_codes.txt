//throughout the code be careful with the control trasfer instruction, because we use the line number to jump from on location to the other, any wrong entery would make the result wrong.
// comment using ; 
// no need of using # for immedaite addressing modes, initially i have used # in this instructions but i have changed it. using # will not work.

mov [0000],72H 
mov al,[0000]          
mov dl,al      result 48 for ip:72
and dl,0fH
and al,f0H
mov cl,0004H
ror al,cl      // bcd to binary
mov [0002],al 
mov dh,0aH 
mul dh
mov [0004],al 
add al,dl 
mov [0006],al 
hlt

mov [0000],1111H
mov [0002],1111H
mov [0004],1111H
mov [0006],1111H
mov [0008],1111H
mov [0010],2222H
mov [0012],2222H
mov [0014],2222H
mov [0016],2222H
mov cx,0000H
mov dx,0005H 
clc
mov si,0000H
mov di,0010H
mov bx,0020H
mov ax,[si]   ;l1
adc ax,[di]
mov [bx],ax
inc si 
inc si
inc di 
inc di 
inc bx 
inc bx
dec dx
jnz 16
jnc 29  ;l2
inc cx 
mov [0028],cx 
hlt

mov [0000],0042H
mov al,[0000]
sub al,30H
cmp al,0aH            ;       //ascii to hex
jc 7           
sub al,07H
mov [0002],al
hlt

mov [0000],ffHh
mov al,[0000]
mov dl,00H
cmp al,64H                  
jc 9                    ;i/p : ffh
sub al,64H               ;result=02 05 05
inc bl                  
jmp 4                       
cmp al,0aH         ; binary to bcd
jc 14
sub al,0aH
inc dl
jmp 9
mov [0002],bl 
mov [0003],dl 
mov [0004],al 
hlt

mov [0000],3322H
mov ax,[0000]
mov [0004],1122H
mov si,0004H
add ax,[si]
sub ax,[si]
hlt


mov [0000],0BH
mov al,[0000]
cmp al,0aH
jc 6             //hex to ascii
add al,07H        result=42
add al,30H
mov [0002],al
hlt


mov ax,1234H
add ax,0022H
jnc l1
mov bx,33H 
l1
mov [0000],ax
hlt

mov al,12F
mov bl,ffF
cmp al,ffF
hlt

mov [0000],#7232
mov ax,[0000] 
mov bl,#2
div bl
hlt

mov [0000],#1234
mov [0002],#2244              0111 0010
mov si,[0000]
mov [0010],[si] 
inc si
inc si
mov [0012],[si]
hlt

mov ax,#1001
mov bx,#0110
add ah,bh
add al,#10
mov [0000],#2345
add al,[0000]
hlt

mov ax,#1001
mov cx,#0110
mov [0000],#0110
add ax,cx
mov ah,#55
mov [0004],#1234
mov [0006],ah
hlt

mov ah,#12
mov ax,#220e
mov [0003],ax
mov [0010],#1234
mov bx,#1234
mov ch,ah 
mov ax,#0022
mov [ax],bx
mov [dx],#0001
hlt

mov cx,#0000
mov [0001],#ffff
mov [0002],#03
mov ax,[0001]
adc ax,[0002]
jnc 8
inc cx
mov [0003],ax
mov [0004],cx
hlt 

mov cx,#6
mov dx,#ffff
mov ax, #0000
mov [ax],dx
inc ax
inc dx
loop 4
mov [0011],#333
mov ah,#11
mov al,#12
hlt

mov cx,#6
mov ax, #0000
mov [ax],#0001
inc ax
loop 3
hlt



mov bx,1100
mov al,[bx]
mov dl,al
and dl,#0f
mov cl,#0004
ror al,cl
mov dh,#0a 
mul dh
add al, dl 
mov [bx+1],al
hlt

mov ax, 1234h
mov bx, 000bh
mov cx, 0000h
sub bx,ax
jnc l1

jnc 9
xchg ax,bx
xchg bx,[0004]
inc cx
mov [0001],ax
l1:mov 0011,cx
hlt

mov ax,a3F1h
mov bx, 1F00h
mov cx, 0000h
inc cx
mov [0001],ax
mov [0002],cx
rcl [0001]
hlt


mov ax, ffffh
mov dx,ax
and dx, ffffh
and ax, 0000h
mov cx, 0004h
rol ax
add ax,dx
mov bx, 000Ah
mov [0001],ax
mov [0080],bx
hlt

mov ax,  25h         
mov bx,  10h
add ax, bx 
sub bx,  5h
ror bx,  1h
and ax, bx
mov cx, [100]       
xchg ax, dx        
adc ax, bx
sbb bx, ax
rol ax, 2h
ror bx,  3h



mov cx,  15h
dec cx
ror cx,  1h
mov ax,  20h
add ax,  5h 
and ax, cx 
jc     8 
mov bx,  50h   ;SHORT_LABEL:
add bx,  100h
mov dx, [200]
xchg bx, cx



mov ax,  7h         
push ax 
pop bx  
ror ax,  2h 
mov bx,  30h
xchg ax, bx
add ax, bx 
jnb 76
dec bx
sub bx,  10h
adc ax, bx
ror ax,  3h 



mov ax,  20h 
mov bx,  15h
add ax, bx
ror bx,  1h 
xchg ax, bx
mov dx, 10h        
sub bx, dx 
adc ax, bx 
mov cx,  5h       
xchg cx, bx 
and ax, bx     
ror bx, 2h


mov ax,  03h
mov [0002],ax
sub ax,  1h  
jnc 2
mov [0001],ax  

mov ax,  fffeh
mov [0002],ax
add ax, 001h  
jnc 2
mov [0001],ax 


mov ax,  fffeh
mov cx,  03h
mov [0002],ax
div cx
mov [0001],ax 


mov cx,64h
mov ax, 0000h
mov [ax],0001h
inc ax
loop 3
hlt

mov ax, fffeh		 ;testing        //commenting succesful
mov cx, 0eH         ;testing
mov [0002],ax               ;testing
div cx      ;testing
mov [0001],ax       ;testing
hlt     ;testing
